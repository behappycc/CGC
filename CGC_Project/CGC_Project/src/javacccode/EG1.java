/* Generated By:JavaCC: Do not edit this line. EG1.java */
package javacccode;
import java.util.*;
import java.io.*;
import cgcdb.*;
import java.util.Stack;
import java.util.ArrayList;


public class EG1 implements EG1Constants {
        CGCDB db;
        Project project;
        Protocol protocol;
        Condition condition;
        Stack count;
        ArrayList<ConditionError> ERROR_LIST;

        public EG1(CGCDB db, Project project, Condition condition, ArrayList<ConditionError> ERROR_LIST) throws ParseException{
                this(new StringReader(condition.getCondition_desc()));

                this.db = db;
                this.project = project;
                this.condition = condition;
                this.ERROR_LIST = ERROR_LIST;

                this.protocol = condition.getProtocol();
        }

  final public Result condition() throws ParseException {
        Result result;
    result = statement();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 0:
      jj_consume_token(0);
      break;
    case 31:
      jj_consume_token(31);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Result statement() throws ParseException {
  Result b;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      b = select_statement();
                                {if (true) return b;}
      break;
    case 32:
      jj_consume_token(32);
      b = select_statement();
      jj_consume_token(33);
                                  {if (true) return b;}
      break;
    case RESULT:
      b = result();
                {if (true) return b;}
      break;
    case VOID:
      jj_consume_token(VOID);
          {if (true) return Result.VOID;}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Result select_statement() throws ParseException {
        boolean a;
        Result b, c;
    jj_consume_token(IF);
    a = expression();
    jj_consume_token(THEN);
    b = statement();
    jj_consume_token(ELSE);
    c = statement();
                if(a)
                        {if (true) return b;}
                else
                        {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public boolean expression() throws ParseException {
        boolean a, b;
        ArrayList list = new ArrayList();
    a = factor();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case OR:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        jj_consume_token(AND);
        b = factor();
                                list.add("AND");
                                list.add(b);
        break;
      case OR:
        jj_consume_token(OR);
        b = factor();
                                list.add("OR");
                                list.add(b);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                while(!list.isEmpty()){
                        Object obj = list.remove(0);
                        if(obj.equals("AND")){
                                a = a & ((boolean)list.remove(0));
                        }else if(obj.equals("OR")){
                                a = a | ((boolean)list.remove(0));
                        }
                }
                {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public boolean factor() throws ParseException {
        boolean b;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 32:
      jj_consume_token(32);
      b = expression();
      jj_consume_token(33);
            {if (true) return b;}
      break;
    case P1:
    case P2:
    case P3:
    case 34:
      b = pic();
                {if (true) return b;}
      break;
    case NOT:
      jj_consume_token(NOT);
      b = factor();
                              {if (true) return !b;}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Result result() throws ParseException {
    Token t;
    t = jj_consume_token(RESULT);
                {if (true) return Result.BySymbol(t.toString());}
    throw new Error("Missing return statement in function");
  }

  final public boolean pic() throws ParseException {
        Condition con;
        Token pic;
        Token ver;
        Pic p;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case P1:
      pic = jj_consume_token(P1);
                      // normal PICS

                p = project.getPic(pic.toString(), condition.getTable_Spec());

                if(p == null){
                        ERROR_LIST.add(new ConditionError(project.getProject_Code(), condition.getTable_Spec(), condition.getCondition_ID(), pic.toString() + " is null."));
                        //nullPic.put(pic.toString(), pic.toString());
                        {if (true) return false;}
                }else{
                        {if (true) return p.getSupport();}
                }
      break;
    case 34:
      jj_consume_token(34);
      ver = jj_consume_token(NUMBER);
      jj_consume_token(35);
      pic = jj_consume_token(P1);
                                           // Reference other table PICS

                int version = Integer.parseInt(ver.toString());
                p = project.getPic(pic.toString(), db.getRefSpec("["+version+"]"));

                if(p == null){
                        ERROR_LIST.add(new ConditionError(project.getProject_Code(), condition.getTable_Spec(), condition.getCondition_ID(), pic.toString() + " is null."));
                        //nullPic.put(pic.toString(), pic.toString());
                        {if (true) return false;}
                }else
                        {if (true) return p.getSupport();}
      break;
    case P2:
      pic = jj_consume_token(P2);
                con = project.getCondition(pic.toString(), condition.getTable_Spec());
                if(!con.isDone()){
                        ConditionSolver.solveCondition(db, project, con, ERROR_LIST);
                }
                {if (true) return con.getResult().getValue();}
      break;
    case P3:
      pic = jj_consume_token(P3);
                con = project.getCondition(pic.toString(), "2G");
                if(con == null){
                        ConditionSolver.solveCondition(db, project, con, ERROR_LIST);
                }
                {if (true) return con.getResult().getValue();}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public EG1TokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80000001,0x200820,0x300,0x300,0x3800400,0x3800000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x1,0x0,0x0,0x5,0x4,};
   }

  /** Constructor with InputStream. */
  public EG1(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public EG1(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new EG1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public EG1(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new EG1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public EG1(EG1TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(EG1TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[36];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 36; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
